[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gen AI for Finance",
    "section": "",
    "text": "Last Updated: September 21, 2025\nThe purpose of this site is to share some experiences and thoughts about teaching MBA students how generative AI can and is being used in the finance industry and how they can leverage it to be more efficient in the workplace. We are all learning this on the fly, and of course things are evolving very quickly, so I’m hoping that sharing will be useful. I invite everyone to share in the comments section below.\nI teach a six-week 18-contact-hour course to first year MBAs in the last part of their first year. For the most part, I do not teach new financial concepts in the course, because we have other courses for those. However, I try to reinforce students’ understanding of concepts they have already seen by approaching them with a different tool (AI + coding). The course caps a first-year sequence consisting of a one-semester core course in the fall followed by an ‘Applied Finance’ course in the first part of the spring that goes deeper into some of the topcs covered in the core course and develops spreadsheet modeling skills. The observations below should also apply to courses in other parts of the curriculum and to courses for different student groups."
  },
  {
    "objectID": "index.html#themes",
    "href": "index.html#themes",
    "title": "Gen AI for Finance",
    "section": "Themes",
    "text": "Themes\nThere a few basic themes that I think should permeate a course on generative AI for finance.\n\nWe should treat AI as a colleague, collaborator, and advisor - see Ethan Mollick, Good Enough Prompting.\nLarge language models (LLMs) cannot be relied upon to do arithmetic, so coding (Python) is essential.\nFor critical operations, we should save tested code as an app.\nTo use a chatbot for critical operations, we should configure the app as a chatbot tool, creating an AI agent.\n\nThe learning/building progression is captured in the following diagram. Chatbots are a special type of app, and agents are chatbots with tools. AI can write the code to create these things, and there are also “no code” options available (Custom GPTs at OpenAI)."
  },
  {
    "objectID": "index.html#tools",
    "href": "index.html#tools",
    "title": "Gen AI for Finance",
    "section": "Tools",
    "text": "Tools\nAt this time, the best tool is Claude Pro ($20/month) with Claude Desktop. Claude Opus and Sonnet are the best coding LLMs. Also, Anthropic recently released Excel integration, so Claude can generate fully functioning, nicely formatted Excel workbooks.1 In addition, Anthropic created the Model Context Protocol (MCP) and has recently made it simpler for users to configure MCP connections in Claude Desktop. Finally, the Pro subscription allows use of Claude Code, which is a very powerful coding agent.\n1 As of September, 2025, Excel generation is only available with the Claude Max ($100/month) account, but it is expected to be available with the Pro account by the end of the year.Previously, I used Julius.ai instead of Claude. Julius provides access to Claude models, in addition to OpenAI models. It provides a 50% academic discount, which is an advantage, but it does not provide Excel generation or MCP connections. ChatGPT is another possibility. It has its Assistants API and Custom GPTs as an alternative to MCP connections. However, it does not, at this time, provide Excel generation. Furthermore, it provides only a limited (though standard) set of Python libraries, unlike Claude, which allows users to add whatever Python libraries they need to the environment that Claude provides in the cloud."
  },
  {
    "objectID": "index.html#outline",
    "href": "index.html#outline",
    "title": "Gen AI for Finance",
    "section": "Outline",
    "text": "Outline\n\nCollaborating with Claude for valuation (Walmart case study)\nVibe coding for finance\n\nAnalysis\nVisualization\nReport generation\n\nCustom chatbots\n\nSystem prompt\nRetrieval augmented generation (Notebook LM)\nCorporate implementation (Deloitte case study)\nCustom GPTs and vibe coded chatbots\n\nApps and agents\n\nApp layout (back-end, front-end, user interface)\nCreating and deploying (Replit, Streamlit)\nConnecting to chatbots (Custom GPTs and MCP)"
  },
  {
    "objectID": "index.html#introductory-example",
    "href": "index.html#introductory-example",
    "title": "Gen AI for Finance",
    "section": "Introductory Example",
    "text": "Introductory Example\nI like the HBS case Valuing Walmart 2010. The approach that the case guides students to use is too simplistic, so I mostly ignore it. I like the case because all students will have some understanding of where Walmart’s value comes from, and we can have meaningful discussions about possible future growth rates.\nWe can start this part of the course by sketching a valuation analysis on the board with student input and discussion. We have to decide what ratios and growth rates we will use to generate pro forma statements and what assumptions we will make about them. This provides a leveling-up experience for students and provides focus to the ensuing discussions.\nAfter working through the issues by hand, we can upload the financial statements in the case to Claude and ask it to generate a two-stage DCF analysis, to document and explain its assumptions, and to produce nicely formatted Excel workbooks and Word docs.\nThe analysis and docs Claude creates are impressive, but of course there will be room to improve the assumptions and perhaps the analysis. Doing this live in class gives students a feel for how to collaborate with AI."
  },
  {
    "objectID": "index.html#vibe-coding-for-finance",
    "href": "index.html#vibe-coding-for-finance",
    "title": "Gen AI for Finance",
    "section": "Vibe Coding for Finance",
    "text": "Vibe Coding for Finance\nBefore getting to financial analysis, students should see the power of vibe coding for data handling, visualization, and statistics. That’s probably a week of class time. Then, some good financial applications of vibe coding are mean-variance analysis and CAPM cost of capital calculations. We can demo one and assign the second as a group project. Yahoo Finance is a good source of free data, but at this time it seems difficult to get that data with Claude; in particular, in my experience, Claude is unable to use the Python yfinance library. Hence, we should provide data. See my blog posts about getting data from Yahoo Finance using Julius.ai, mean-variance analysis, and calculating the cost of capital.\nThere are natural visualization components to both exercises, namely the plot of the mean-variance frontier and the CAPM scatter plot and regression line. AI can write Python code to create the visualizations and to produce Word docs and/or PowerPoint decks containing the analyses and visualizations. See this post about generating Word docs and PowerPoint decks and this post about visualization.\nThere is a lot that could be done on option pricing if students have seen options already. As remarked above, I teach a first-year class, and I can’t preempt what will be taught to second-year students. Except for that issue, I would certainly spend some time on options."
  },
  {
    "objectID": "index.html#custom-chatbots",
    "href": "index.html#custom-chatbots",
    "title": "Gen AI for Finance",
    "section": "Custom Chatbots",
    "text": "Custom Chatbots\nCustom chatbots involve\n\nA user interface\nAn API connection to an LLM\nA system prompt\nPossible retrieval of documents\nPossible use of tools\n\nIt is useful to show OpenAI Custom GPTs to students and then to show API connections using Claude. Students can get API keys from OpenAI even with free accounts, or they can get API keys from Anthropic or Google. They can ask any chatbot how to do it. They should save their API keys as secret keys in Claude Desktop. They will be charged for using the API keys on a per-token basis, but the charges will be trivial for the experimentation that is done in the course. They could also get free API keys from Open Router and use free open source LLMS from Hugging Face.\nOutside of Custom GPTs, deploying a custom chatbot is the same as deploying an app. This leads naturally to creating apps and agents. But, first, it is worthwhile to look at the creation of custom chatbots for companies."
  },
  {
    "objectID": "index.html#corporate-implementations",
    "href": "index.html#corporate-implementations",
    "title": "Gen AI for Finance",
    "section": "Corporate Implementations",
    "text": "Corporate Implementations\nThis case about Implementing AI at Deloitte is a good foundation for a class discussion of AI implementation. It covers the issues of data privacy, compliance, client trust, reliability, biases, and employee buy-in. It also describes how Deloitte set up a custom chatbot.\nThis widely cited MIT Study is also must-reading. It has been described in the media as reporting that 95% of corporate AI implementations fail. What it actually says is that only 5% of corporate AI pilots reach production, which is not quite the same thing. The reasons that most pilots are abandoned and the characteristics of successful pilots are informative. Also key is this passage: “workers from over 90% of the companies we surveyed reported regular use of personal AI tools for work tasks. In fact, almost every single person used an LLM in some form for their work.” So, AI is being widely used, despite the difficulties companies have faced in designing and implementing company-specific AI solutions.\nAnother very interesting item is this study about the use of AI in corporate teams. The study is described by one of the authors here. They conclude that, instead of thinking of AI as a tool, it should be regarded as a teammate. They find that one person working with AI is at least as efficient as two people working in a team without AI. The most effective combination is naturally a team with AI. Interestingly, they find that AI enables workers and teams to break functional silos, performing like teams composed of individuals with diverse functional knowledge."
  },
  {
    "objectID": "index.html#apps-and-agents",
    "href": "index.html#apps-and-agents",
    "title": "Gen AI for Finance",
    "section": "Apps and Agents",
    "text": "Apps and Agents\nWhatever code an LLM (large language model) writes for financial analysis can be encapsulated in an app. This has two important advantages. First, the app can be made broadly available, so people get the benefit of the code without needing to go to a chatbot to write it. Second, the code can be tested, confirmed, and frozen. This ensures that mistakes will not be introduced by rewriting the code each time it is needed.\nMBA students need to understand that apps can be created to automate activities, and they need to understand about custom chatbots and AI agents. But, of course, they are not studying to become software engineers, so creating apps is a bit of a digression. Nevertheless, I think it is worth doing. Being able to automate routine tasks is a useful skill to have, and vibe coding makes it surprisingly easy. It also enables us to create concrete examples of custom chatbots and AI agents.\nDeployment of apps is not difficult. The simplest method is to use Replit ($20/month) to create and deploy apps. The next simplest is to deploy Streamlit apps on Hugging Face Spaces (free). Streamlit Community Cloud is another alternative.2\nSee my blog post about apps or the discussion below.\n2 Hugging Face Spaces and Streamlit Community Cloud are better for demonstration purposes than permanent deployment, because apps must be restarted by the app owner whenever they are unused for a day or so.At this point, students will have seen financial analysis via:\n\nUsing Excel\nvibe coding\nCreating and using an app\n\nThis provides the foundation for an informative class discussion about the relative merits of each approach and the circumstances in which one approach is better than another.\nAn AI agent is a chatbot that can use tools to complete tasks. Unlike regular chatbots that only generate text, agents can call functions, access APIs, and run applications to get things done.\nStudents are prepared to learn about AI agents after having seen app development and custom chatbot development. As examples, we can create apps from the vibe-coded mean-variance and cost-of-capital analysis, deploy them, and create MCP servers to connect them to Claude desktop. This is ambitious, and it is possible we will only want to demo it rather than require students to learn it."
  },
  {
    "objectID": "index.html#extras",
    "href": "index.html#extras",
    "title": "Gen AI for Finance",
    "section": "Extras",
    "text": "Extras\n\nIntroduction to Python\nStudents need to have some understanding of what they are seeing when an LLM generates code. I provide an optional pre-course workshop on using Jupyter notebooks in Google Colab, basic elements of Python, and pandas, numpy, and visualization libraries.\n\n\nDatabase Chatbots\nAn example of a useful custom chatbot is one that converts natural language prompts into database queries and returns data. To demonstrate this, we first need to store a database online. We can use CRSP and/or Compustat data or other data for this example. An easy way to create an online database is to create an account at MotherDuck and use the MotherDuck CLI (command line interface) to upload csv files. A chatbot can tell you how to do this, or, there are agentic chatbots that can do it for you (see below). Then, we can ask Claude (or Replit) to create a chatbot that (i) sends a user prompt to an LLM, (ii) receives a response in the form of SQL code, (iii) sends the SQL code to MotherDuck to retrieve data, and (iv) returns the data to the user. This utilizes the duckdb Python library, which executes SQL queries against csv files and other types of files just as if a SQL database had been set up. To create the chatbot, a system prompt must be created that adequately describes the csv files to the LLM. This requires testing and iteration.\n\n\nApp Deployment\nTo permanently deploy an app, we need an account at a host. Koyeb is a good choice. Render is similar. A relatively simple way to deploy is to create a GitHub account. Then, we can\n\nInitialize a GitHub repository\nPush our code to GitHub\nAdd a new Koyeb or Render service\nConnect the service to the GitHub repository\nClick ‘Deploy’ on Koyeb or Render\n\nA chatbot can walk students through each step.\n\n\nClaude Code\nCurrently, Claude Code is the most powerful publicly available system for applying generative AI to finance. It is a terminal-based AI agent. Students should see it. Also, if we are going to ask students to vibe code apps, chatbots, or agents, and if students have Claude Pro accounts, then we should make it feasible for them to use Claude Code. Most students will be inexperienced in working in a terminal - we have to explain how to use the arrow keys, Backspace, and Delete to edit, the cd command for changing directories, etc. Once they’ve seen that and installed Claude Code, they can open it (type claude in the terminal) and ask Claude Code to install Python and put it on the path. Then, it can create, edit, and run Python scripts. It can run Streamlit apps, manage connections to GitHub, Koyeb, etc.\n\n\n© Kerry Back J. Howard Creekmore Professor of Finance and Professor of Economics Rice University kerryback.com"
  },
  {
    "objectID": "index.html#giscus",
    "href": "index.html#giscus",
    "title": "Gen AI for Finance",
    "section": "Discussion",
    "text": "Discussion\nPlease share your thoughts, experiences, or questions about teaching AI-assisted finance in the comments below."
  }
]